"""
Service de traduction Azure Translator
Adapt√© des fonctions Azure Functions existantes
"""

import logging
import os
import requests
import asyncio
import uuid
from typing import Dict, Any, Optional
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)


class TranslationService:
    """Service pour la traduction de documents via Azure Translator"""

    def __init__(self):
        # Configuration Azure Translator
        self.trans_key = os.getenv('TRANSLATOR_TEXT_SUBSCRIPTION_KEY')
        self.trans_endpoint = os.getenv('TRANSLATOR_TEXT_ENDPOINT')

        if not self.trans_key:
            raise ValueError("TRANSLATOR_TEXT_SUBSCRIPTION_KEY non d√©finie")
        if not self.trans_endpoint:
            raise ValueError("TRANSLATOR_TEXT_ENDPOINT non d√©finie")

        # Assurer que l'endpoint se termine par "/"
        if not self.trans_endpoint.endswith("/"):
            self.trans_endpoint += "/"

        # URL de base pour l'API Batch Translation
        self.batch_api_url = f"{self.trans_endpoint}translator/text/batch/v1.1/batches"

        # Headers communs
        self.headers = {
            'Content-Type': 'application/json',
            'Ocp-Apim-Subscription-Key': self.trans_key
        }

        logger.info("‚úÖ TranslationService initialis√©")

    async def start_translation(self, source_url: str, target_url: str, target_language: str) -> str:
        """
        D√©marre une traduction batch
        √âquivalent de start_translation d'Azure Functions
        """

        logger.info(f"üöÄ D√©marrage traduction batch vers {target_language}")
        logger.info(f"üìÑ Source: {source_url[:50]}...")
        logger.info(f"üìÅ Target: {target_url[:50]}...")

        try:
            # Corps de la requ√™te pour l'API Batch Translation
            body = {
                "inputs": [
                    {
                        "storageType": "File",
                        "source": {
                            "sourceUrl": source_url
                        },
                        "targets": [
                            {
                                "targetUrl": target_url,
                                "language": target_language
                            }
                        ]
                    }
                ]
            }

            # Envoi de la requ√™te
            logger.info("üì§ Envoi de la requ√™te de traduction...")
            response = requests.post(
                self.batch_api_url,
                headers=self.headers,
                json=body,
                timeout=30
            )

            # V√©rification de la r√©ponse
            if response.status_code != 202:  # 202 = Accepted pour les op√©rations async
                logger.error(
                    f"‚ùå Erreur HTTP {response.status_code}: {response.text}")
                raise Exception(
                    f"Erreur de traduction: {response.status_code} - {response.text}")

            # R√©cup√©ration de l'URL de statut
            translation_status_url = response.headers.get('Operation-Location')
            if not translation_status_url:
                raise Exception(
                    "URL de statut de traduction non trouv√©e dans la r√©ponse")

            # Extraction de l'ID de traduction depuis l'URL
            translation_id = translation_status_url.split('/')[-1]

            logger.info(f"‚úÖ Traduction d√©marr√©e avec succ√®s")
            logger.info(f"üÜî Translation ID: {translation_id}")
            logger.info(f"üîó Status URL: {translation_status_url}")

            return translation_id

        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå Erreur r√©seau lors du d√©marrage: {str(e)}")
            raise Exception(f"Erreur r√©seau: {str(e)}")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors du d√©marrage: {str(e)}")
            raise

    async def check_translation_status(self, translation_id: str) -> Dict[str, Any]:
        """
        V√©rifie le statut d'une traduction
        √âquivalent de check_translation_status d'Azure Functions
        """

        try:
            # Construction de l'URL de statut
            status_url = f"{self.batch_api_url}/{translation_id}"

            # Headers pour la requ√™te de statut
            status_headers = {
                'Ocp-Apim-Subscription-Key': self.trans_key
            }

            logger.info(f"üîç V√©rification statut traduction: {translation_id}")

            # Requ√™te de statut
            response = requests.get(
                status_url, headers=status_headers, timeout=15)

            if response.status_code != 200:
                logger.error(
                    f"‚ùå Erreur lors de la v√©rification: {response.status_code}")
                return {
                    "status": "Failed",
                    "error": f"Erreur HTTP {response.status_code}: {response.text}"
                }

            # Analyse de la r√©ponse
            status_data = response.json()
            api_status = status_data.get('status', 'Unknown')

            # Mapping des statuts Azure vers des statuts simplifi√©s
            status_mapping = {
                'NotStarted': 'Pending',
                'Running': 'InProgress',
                'Succeeded': 'Succeeded',
                'Failed': 'Failed',
                'Cancelled': 'Failed',
                'Cancelling': 'InProgress'
            }

            simplified_status = status_mapping.get(api_status, 'Unknown')

            # Informations d√©taill√©es
            result = {
                "status": simplified_status,
                "original_status": api_status,
                "progress": self._get_progress_info(status_data),
                "created_at": status_data.get('createdDateTimeUtc'),
                "last_updated": status_data.get('lastActionDateTimeUtc')
            }

            # Ajout des d√©tails d'erreur si √©chec
            if simplified_status == 'Failed':
                result["error"] = self._extract_error_info(status_data)

            # Ajout des statistiques si disponibles
            if 'summary' in status_data:
                summary = status_data['summary']
                result["summary"] = {
                    "total": summary.get('total', 0),
                    "failed": summary.get('failed', 0),
                    "success": summary.get('success', 0),
                    "in_progress": summary.get('inProgress', 0)
                }

            logger.info(f"üìä Statut: {simplified_status} ({api_status})")

            return result

        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå Erreur r√©seau lors de la v√©rification: {str(e)}")
            return {
                "status": "Failed",
                "error": f"Erreur r√©seau: {str(e)}"
            }
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la v√©rification: {str(e)}")
            return {
                "status": "Failed",
                "error": f"Erreur interne: {str(e)}"
            }

    def _get_progress_info(self, status_data: Dict[str, Any]) -> str:
        """Extrait les informations de progression"""

        if 'summary' in status_data:
            summary = status_data['summary']
            total = summary.get('total', 0)
            success = summary.get('success', 0)
            failed = summary.get('failed', 0)
            in_progress = summary.get('inProgress', 0)

            if total > 0:
                completed = success + failed
                percentage = (completed / total) * 100
                return f"Progression: {completed}/{total} ({percentage:.1f}%)"

        return status_data.get('status', 'En cours...')

    def _extract_error_info(self, status_data: Dict[str, Any]) -> str:
        """Extrait les informations d'erreur d√©taill√©es"""

        # V√©rification des erreurs dans le summary
        if 'summary' in status_data and status_data['summary'].get('failed', 0) > 0:
            return "√âchec de la traduction. V√©rifiez le format du fichier et la langue cible."

        # V√©rification des erreurs dans les d√©tails
        if 'error' in status_data:
            error = status_data['error']
            if isinstance(error, dict):
                return error.get('message', 'Erreur inconnue')
            return str(error)

        return "Traduction √©chou√©e pour une raison inconnue"

    async def cancel_translation(self, translation_id: str) -> bool:
        """Annule une traduction en cours"""

        try:
            cancel_url = f"{self.batch_api_url}/{translation_id}"

            response = requests.delete(
                cancel_url,
                headers={'Ocp-Apim-Subscription-Key': self.trans_key},
                timeout=15
            )

            if response.status_code in [200, 204]:
                logger.info(f"‚úÖ Traduction {translation_id} annul√©e")
                return True
            else:
                logger.error(
                    f"‚ùå Erreur lors de l'annulation: {response.status_code}")
                return False

        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'annulation: {str(e)}")
            return False
